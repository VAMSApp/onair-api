import { VirtualAirline, Flight, Aircraft, Airport, Fbo, Company, Job, BalanceSheet, CashFlow, IncomeStatement, Member, Notification, People, ShareHolder, WorkOrder, VARole, FlightTrack } from './';
export declare type IncomeStatementResponse = {
    StartDate: string;
    EndDate: string;
    Content: IncomeStatement | IncomeStatement[] | null;
};
export declare type BalanceSheetResponse = BalanceSheet | null;
export declare type VirtualAirlineResponse = VirtualAirline | null;
export declare type FlightResponse = Flight | null;
export declare type FlightsResponse = Flight[];
export declare type AircraftResponse = Aircraft | null;
export declare type FleetResponse = Aircraft[];
export declare type AirportResponse = Airport | null;
export declare type AirportsResponse = Airport[];
export declare type FboResponse = Fbo | null;
export declare type FbosResponse = Fbo[];
export declare type CompanyResponse = Company | null;
export declare type CompaniesResponse = Company[];
export declare type MissionFlightTracksResponse = FlightTrack[];
export declare type JobResponse = Job | null;
export declare type JobsResponse = Job[];
export declare type CashFlowResponse = CashFlow | null;
export declare type MemberResponse = Member | null;
export declare type MembersResponse = Member[];
export declare type FlightTrackResponse = FlightTrack | null;
export declare type FlightTracksResponse = FlightTrack[];
export declare type NotificationResponse = Notification | null;
export declare type NotificationsResponse = Notification[];
export declare type EmployeeResponse = People | null;
export declare type EmployeesResponse = People[];
export declare type ShareHolderResponse = ShareHolder | null;
export declare type ShareHoldersResponse = ShareHolder[];
export declare type WorkOrderResponse = WorkOrder | null;
export declare type WorkOrdersResponse = WorkOrder[];
export declare type VARoleResponse = VARole | null;
export declare type VARolesResponse = VARole[];
export declare type GetAircraft = (aircraftId: string, apiKey: string) => Promise<AircraftResponse>;
export declare type GetAircraftFlights = (aircraftId: string, apiKey: string, page?: number, limit?: number) => Promise<FlightsResponse>;
export declare type GetAirport = (icao: string, apiKey: string) => Promise<AirportResponse>;
export declare type GetCompanyFbos = (companyId: string, apiKey: string) => Promise<FbosResponse>;
export declare type GetCompanyFleet = (companyId: string, apiKey: string) => Promise<FleetResponse>;
export declare type GetCompanyFlights = (companyId: string, apiKey: string, page?: number, limit?: number) => Promise<FlightsResponse>;
export declare type GetCompanyJobs = (companyId: string, apiKey: string, completed?: boolean) => Promise<JobsResponse>;
export declare type GetCompanyEmployees = (companyId: string, apiKey: string) => Promise<EmployeesResponse>;
export declare type GetCompanyCashFlow = (companyId: string, apiKey: string) => Promise<CashFlowResponse>;
export declare type GetCompanyIncomeStatement = (companyId: string, apiKey: string, startDate?: string, endDate?: string) => Promise<IncomeStatementResponse>;
export declare type GetCompanyBalanceSheet = (companyId: string, apiKey: string) => Promise<BalanceSheetResponse>;
export declare type GetCompanyWorkOrders = (companyId: string, apiKey: string) => Promise<WorkOrdersResponse>;
export declare type GetCompanyMissionFlightTracks = (companyId: string, apiKey: string) => Promise<MissionFlightTracksResponse>;
export declare type GetCompany = (companyId: string, apiKey: string) => Promise<CompanyResponse>;
export declare type GetFlight = (flightId: string, apiKey: string) => Promise<FlightResponse>;
export declare type GetVirtualAirlineMembers = (vaId: string, apiKey: string) => Promise<MembersResponse>;
export declare type GetVirtualAirline = (vaId: string, apiKey: string) => Promise<VirtualAirlineResponse>;
export declare type GetVirtualAirlineShareHolders = (vaId: string, apiKey: string) => Promise<ShareHoldersResponse>;
export declare type GetVirtualAirlineRoles = (vaId: string, apiKey: string) => Promise<VARolesResponse>;
export declare type GetVirtualAirlineFlights = (vaId: string, apiKey: string, page?: number | undefined, limit?: number | undefined) => Promise<FlightsResponse>;
export declare type GetVirtualAirlineFleet = (vaId: string, apiKey: string) => Promise<FleetResponse>;
export declare type GetVirtualAirlineJobs = (vaId: string, apiKey: string) => Promise<JobsResponse>;
export declare type GetVirtualAirlineFbos = (vaId: string, apiKey: string) => Promise<FbosResponse>;
export declare type GetVirtualAirlineNotifications = (vaId: string, apiKey: string) => Promise<NotificationsResponse>;
export declare type GetVirtualAirlineIncomeStatement = (vaId: string, apiKey: string, startDate?: string, endDate?: string) => Promise<IncomeStatementResponse>;
export declare type GetEmployee = (employeeId: string, apiKey: string) => Promise<EmployeeResponse>;
export interface IOnAirApi {
    isValidGuid(guid: string): boolean;
    getCompany: (companyId?: string) => Promise<CompanyResponse>;
    getCompanyFleet: (companyId?: string) => Promise<FleetResponse>;
    getCompanyFbos: (companyId?: string) => Promise<FbosResponse>;
    getCompanyFlights: (companyId?: string, page?: number, limit?: number) => Promise<FlightsResponse>;
    getCompanyJobs: (companyId?: string, completed?: boolean) => Promise<JobsResponse>;
    getCompanyEmployees: (companyId?: string) => Promise<EmployeesResponse>;
    getCompanyCashFlow: (companyId?: string) => Promise<CashFlowResponse>;
    getCompanyIncomeStatement: (companyId?: string, startDate?: string | undefined, endDate?: string | undefined) => Promise<IncomeStatementResponse>;
    getCompanyBalanceSheet: (companyId?: string) => Promise<BalanceSheetResponse>;
    getCompanyMissionFlightTracks: (companyId?: string) => Promise<MissionFlightTracksResponse>;
    getCompanyWorkOrders: (companyId?: string) => Promise<WorkOrdersResponse>;
    getAircraft: (aircraftId: string) => Promise<AircraftResponse>;
    getAircraftFlights: (aircraftId: string, page?: number, limit?: number) => Promise<FlightsResponse>;
    getAirport: (airportCode: string) => Promise<AirportResponse>;
    getFlight: (flightId: string) => Promise<FlightResponse>;
    getVirtualAirline: (vaId?: string) => Promise<VirtualAirlineResponse>;
    getVirtualAirlineMembers: (vaId?: string) => Promise<MembersResponse>;
    getVirtualAirlineShareHolders: (vaId?: string) => Promise<ShareHoldersResponse>;
    getVirtualAirlineRoles: (vaId?: string) => Promise<VARolesResponse>;
    getVirtualAirlineFlights: (vaId?: string, page?: number, limit?: number) => Promise<FlightsResponse>;
    getVirtualAirlineFleet: (vaId?: string) => Promise<FleetResponse>;
    getVirtualAirlineJobs: (vaId?: string) => Promise<JobsResponse>;
    getVirtualAirlineFbos: (vaId?: string) => Promise<FbosResponse>;
    getVirtualAirlineNotifications: (vaId?: string) => Promise<NotificationsResponse>;
    getVirtualAirlineIncomeStatement: (vaId?: string, startDate?: string | undefined, endDate?: string | undefined) => Promise<IncomeStatementResponse>;
    getEmployee: (employeeId: string) => Promise<EmployeeResponse>;
}
export interface OnAirApiConfigOptions {
    logLevel: string;
    logConsole?: boolean;
}
export interface OnAirApiConfig {
    apiKey: string;
    companyId?: string | undefined;
    vaId?: string | undefined;
    options?: OnAirApiConfigOptions;
}
